#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) uniform image3D VolumeTexture;
layout(set = 0, binding = 1) uniform sampler2D PatternTexture;

layout(set = 0, binding = 2) uniform FogParameters
{
	vec4 Globals; //xy - Dir, Z - time
	vec4 NumberOfWaves;
	vec4 Waves[8]; // x - A, y - wave, z - Speed
};

const float PI = 3.1415926535897;

float Compute(vec2 dir, float A, float wave, float speed, float time, vec2 coords)
{
	float freq = 2 * PI / wave;
	float phase = speed *  freq;
	return A * sin(dot(dir, coords) * freq  + phase * time);
}

vec3 colors[3] = {vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f)};

 void main()
 {
	float layers = float(gl_NumWorkGroups.z);
	
	//vec4 c = texture(PatternTexture, uv);
	uint row = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	uint size = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
	uint layer = gl_WorkGroupID.z;

	vec4 c = vec4(vec3(0.5f), 0.2f);
	vec2 coords = vec2(float(row) / float(size), float(layer) / float(layers));
	
	float height = 0;
	for(uint i = 0; i < uint(NumberOfWaves.x); ++i)
	{
		float A = Waves[i].x;
		float wave = Waves[i].y;
		float speed = length(Waves[i].zw);
		vec2 dir = Waves[i].zw / speed;
		
		height += Compute(dir, A, wave, speed, Globals.z, coords);
	}
	
	height = (height + NumberOfWaves.x) / (2.0f * NumberOfWaves.x);
	int start = int(height * size);
	
	for (int y = start; y < size; ++y)
	{
		ivec3 currPosition = ivec3(row, y, int(layer));
		imageStore(VolumeTexture, currPosition, c);
	}
	
	
 }
 