#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) uniform image3D VolumeTexture;

const float PI = 3.1415926535897;
float F(float x, float freq)
{
	const float A = 1.0f;
	float w = PI / 3.0;
	float y = A * sin(2 * PI * (freq + 0.1) * x + w);
	return y;
}

 void main()
 {
	uvec2 totalResolution = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;
	uvec3 currPosition = uvec3(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy, gl_WorkGroupID.z);
	float layers = float(gl_NumWorkGroups.z);
	
	vec2 uv = vec2(currPosition.xy) / vec2(totalResolution);
	float layer = gl_WorkGroupID.z;
	float y = F(uv.s, layer / 5.0);
	float minRange = 0.45f;
	float maxRange = 0.75f;
	float localRange = minRange + (1.0 - layer / layers) * (maxRange - minRange) - 0.05;
	y = localRange + ((y + 1.0f) / 2.0f) * (maxRange - localRange);
	
	//vec3 c =  (uv.t >= minRange && uv.t <= maxRange)? vec3(y) : vec3(0.05f);
	vec4 c =  (uv.t >= y)? vec4(y, y, y, layer) : vec4(0.0f);
	imageStore(VolumeTexture, ivec3(currPosition), c);
 }
 